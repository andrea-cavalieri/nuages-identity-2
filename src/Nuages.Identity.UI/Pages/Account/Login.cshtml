@page
@using Nuages.Web.Recaptcha
@using System.Net
@model Nuages.Identity.UI.Pages.Account.Login
@inject IOptions<GoogleRecaptchaOptions> RecaptchaOptions
@inject IOptions<UIOptions> UIOptions

@{
    ViewData["Title"] = Localizer["login:title"];
    ViewBag.ShowRegistration = UIOptions.Value.ShowRegistration;
}

@section Header
{
    @if (ViewBag.ShowRegistration)
    {
        <div>
            <p class="mt-2 text-center text-sm">
                <label>@Localizer["or"]</label>
                <a href="/Account/Register" class="font-medium ">
                    @Localizer["register.title"]
                </a>
            </p>
        </div>
    }
}

<div >
    <form class="mt-4"  v-on:submit.prevent="login" id="formLogin" autocomplete=“off”>
        @Html.AntiForgeryToken()
     
        <fieldset class="space-y-4" :disabled="status == 'sending'">
            <partial name="Shared/ErrorList"/>

            <input id="userNameOrEmail" name="userNameOrEmail" type="text" autofocus="" v-model="userNameOrEmail" placeholder="@Model.UserNamePlaceHolder" required class="text-box" autocomplete=“off”>
            <input id="password" name="password" type="password" v-model="password" placeholder="@Localizer["login:password"]" autocomplete="current-password" required class="text-box ">

            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <input id="remember-me" name="remember-me" v-model="remember" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                    <label for="remember-me" class="ml-2 block text-sm ">
                        @Localizer["login:rememberMe"]
                    </label>
                </div>
                <div class="text-sm">
                    <a href="/account/forgotpassword">
                        @Localizer["login:forgotPassword"]
                    </a>
                </div>
            </div>
            <button v-on:click.prevent="login" class="primary full items-center" :disabled="status == 'sending'">
                @Localizer["login:connect"]<i class="fas fa-spinner fa-spin ml-2" v-if="status == 'sending'" v-show="status == 'sending'" style="display: none"></i>
            </button>
        </fieldset>

    </form>

    @if (Model.ExternalLogins.Count > 0 || UIOptions.Value.EnablePasswordless)
    {
        <partial name="Shared/SeparatorWithTitle" model="new { Title =  @Localizer["login:continueWith"] }"/>
        
        <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="mt-4 space-x-2">
            @foreach (var provider in Model.ExternalLogins)
            {
                <button type="submit" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account" class="btn-simple">
                    <i class="@("fab fa-" + provider.DisplayName!.ToLower())"></i>&nbsp;
                    @provider.DisplayName
                </button>
            }
            @if (UIOptions.Value.EnablePasswordless)
            {
                <a class="btn-simple mt-4"  asp-page="./LoginWithPasswordless" asp-route-returnUrl="@Model.ReturnUrl"><i class="fas fa-rocket"></i>&nbsp;@Localizer["login:passwordless"]</a>
            }

        </form>
        <div>Version 2</div>
    }
</div>

@section Scripts
{
    <script>
        var emailRequiredMessage = "@string.Format(Localizer["errorMessage:required"]!, Model.UserNamePlaceHolder)";
        var passwordRequiredMessage = "@string.Format(Localizer["errorMessage:required"]!, Localizer["login:password"])";
        var emailInvalidMessage = "@Localizer["errorMessage:invalidEmail"]";
        var recaptcha = '@RecaptchaOptions.Value.SiteKey';
        var returnUrl = '@Html.Raw(Model.ReturnUrl)';
        var returnUrlEncoded ='@System.Net.WebUtility.UrlEncode(Model.ReturnUrl)';
        var xsrfToken = '@Antiforgery.GetAndStoreTokens(HttpContext).RequestToken';
    </script>

    <script src="/js/pages/login.js"></script>
}