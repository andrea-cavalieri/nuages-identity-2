@page
@using Nuages.Web.Recaptcha
@model Nuages.Identity.UI.Pages.Account.RegisterModel
@inject IOptions<GoogleRecaptchaOptions> RecaptchaOptions
@inject IOptions<UIOptions> UIOptions

@{
    ViewData["title"] = Localizer["register:title"];

}


<div class="mb-4 p-4" v-if="status == 'done'" v-show="status == 'done'" style="display: none">
    <span class="green-success font-medium">
        <i class="fas fa-check"></i> @Localizer["register:accountCreated"]
    </span>
</div>


<form class="space-y-4 mt-4" method="POST" v-on:submit.prevent="login" id="formRegister" v-if="status != 'done'">

    <span class="instructions">@Localizer["register:instructions"]</span>
    <partial name="Shared/ErrorList"/>

    <fieldset class="space-y-4" :disabled="status == 'sending'">
        <input id="email" name="email" autofocus="" v-model="email" placeholder="@Localizer["yourEmail"]" required class="text-box" type="email">
        <input id="password" name="password" type="password" v-model="password" placeholder="@Localizer["login:password"]" autocomplete="current-password" required class="text-box ">
        <input id="passwordConfirm" name="passwordConfirm" type="password" v-model="passwordConfirm" placeholder="@Localizer["register:passwordConfirmation"]" autocomplete="current-password" required class="text-box ">
        <button v-on:click.prevent="register" class="primary full items-center" :disabled="status == 'sending'">
            @Localizer["register:button"]<i class="fas fa-spinner fa-spin ml-2" v-if="status == 'sending'" v-show="status == 'sending'" style="display: none"></i>
        </button>
        <partial name="Shared/PasswordRequirements"/>
    </fieldset>

</form>

@if (Model.ExternalLogins.Count > 0)
{
    <partial name="Shared/SeparatorWithTitle" model="new { Title =  @Localizer["register:continueWith"] }"/>
    
    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="mt-4" v-if="status != 'done'">
        <ul>

            @foreach (var provider in Model.ExternalLogins)
            {
                <li>
                    <button type="submit" name="provider" value="@provider.Name" class="btn-simple">
                        <i class="@("fab fa-" + provider.DisplayName!.ToLower())"></i>&nbsp;
                        @provider.DisplayName
                    </button>
                </li>
            }

        </ul>
    </form>
}

@section Scripts
{
    <script>
        var emailRequiredMessage = "@string.Format(Localizer["errorMessage:required"]!, Localizer["email"])";
        var passwordRequiredMessage = "@string.Format(Localizer["errorMessage:required"]!, Localizer["login:password"])";
        var passwordConfirmationRequiredMessage = "@string.Format(Localizer["errorMessage:required"]!, Localizer["register:passwordConfirmation"])";
        var passwordMustMatch = "@Localizer["register:passwordMustMatch"]";
        var emailInvalidMessage = "@Localizer["errorMessage:invalidEmail"]";
        var recaptcha = '@RecaptchaOptions.Value.SiteKey';
        var returnUrl = '@Html.Raw(Model.ReturnUrl)';
    </script>
    <script src="/js/pages/register.js"></script>
}

@section MainFooter
{
    <partial name="Shared/BackToLogin"/>
}